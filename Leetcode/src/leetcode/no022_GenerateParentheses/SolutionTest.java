package leetcode.no022_GenerateParentheses;

import static org.junit.Assert.*;
import static org.hamcrest.collection.IsIterableContainingInAnyOrder.containsInAnyOrder;

import java.util.List;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

public class SolutionTest {

	private Solution solution;

	@Before
	public void setUp() throws Exception {
		solution = new Solution();
	}

	@After
	public void tearDown() throws Exception {
		solution = null;
	}

	@Test
	public void initiated() {
		assertNotNull(solution);
	}

	private void assertParentheses(List<String> expected, int n) {
		List<String> actual = solution.generateParenthesis(n);
		assertThat(actual, containsInAnyOrder(expected.toArray()));
	}

	@Test
	public void example() {
		int n = 3;
		List<String> expected = List.of("((()))", "(()())", "(())()", "()(())", "()()()");
		assertParentheses(expected, n);
	}

	@Test
	public void zero() {
		int n = 0;
		List<String> expected = List.of("");
		assertParentheses(expected, n);
	}

	@Test
	public void one() {
		int n = 1;
		List<String> expected = List.of("()");
		assertParentheses(expected, n);
	}

	@Test
	public void two() {
		int n = 2;
		List<String> expected = List.of("(())", "()()");
		assertParentheses(expected, n);
	}

	@Test
	public void six() {
		int n = 6;
		List<String> expected = List.of("(((((())))))", "((((()()))))", "((((())())))", "((((()))()))", "((((())))())",
				"((((()))))()", "(((()(()))))", "(((()()())))", "(((()())()))", "(((()()))())", "(((()())))()",
				"(((())(())))", "(((())()()))", "(((())())())", "(((())()))()", "(((()))(()))", "(((()))()())",
				"(((()))())()", "(((())))(())", "(((())))()()", "((()((()))))", "((()(()())))", "((()(())()))",
				"((()(()))())", "((()(())))()", "((()()(())))", "((()()()()))", "((()()())())", "((()()()))()",
				"((()())(()))", "((()())()())", "((()())())()", "((()()))(())", "((()()))()()", "((())((())))",
				"((())(()()))", "((())(())())", "((())(()))()", "((())()(()))", "((())()()())", "((())()())()",
				"((())())(())", "((())())()()", "((()))((()))", "((()))(()())", "((()))(())()", "((()))()(())",
				"((()))()()()", "(()(((()))))", "(()((()())))", "(()((())()))", "(()((()))())", "(()((())))()",
				"(()(()(())))", "(()(()()()))", "(()(()())())", "(()(()()))()", "(()(())(()))", "(()(())()())",
				"(()(())())()", "(()(()))(())", "(()(()))()()", "(()()((())))", "(()()(()()))", "(()()(())())",
				"(()()(()))()", "(()()()(()))", "(()()()()())", "(()()()())()", "(()()())(())", "(()()())()()",
				"(()())((()))", "(()())(()())", "(()())(())()", "(()())()(())", "(()())()()()", "(())(((())))",
				"(())((()()))", "(())((())())", "(())((()))()", "(())(()(()))", "(())(()()())", "(())(()())()",
				"(())(())(())", "(())(())()()", "(())()((()))", "(())()(()())", "(())()(())()", "(())()()(())",
				"(())()()()()", "()((((()))))", "()(((()())))", "()(((())()))", "()(((()))())", "()(((())))()",
				"()((()(())))", "()((()()()))", "()((()())())", "()((()()))()", "()((())(()))", "()((())()())",
				"()((())())()", "()((()))(())", "()((()))()()", "()(()((())))", "()(()(()()))", "()(()(())())",
				"()(()(()))()", "()(()()(()))", "()(()()()())", "()(()()())()", "()(()())(())", "()(()())()()",
				"()(())((()))", "()(())(()())", "()(())(())()", "()(())()(())", "()(())()()()", "()()(((())))",
				"()()((()()))", "()()((())())", "()()((()))()", "()()(()(()))", "()()(()()())", "()()(()())()",
				"()()(())(())", "()()(())()()", "()()()((()))", "()()()(()())", "()()()(())()", "()()()()(())",
				"()()()()()()");
		assertParentheses(expected, n);
	}

}
